=== ./AppRouter.java ===
package JavaApp;

import io.javalin.Javalin;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

/**
 * アプリケーションのルーティングを担当するクラス
 */
public class AppRouter {
    public static void setupRoutes(Javalin app) {
        app.get("/JavaApp", ctx -> {
            Map<String, Object> model = new HashMap<>();
            String queryStr = ctx.queryParam("queryStr");

            SemanticNet sn = new SemanticNet();
            sn.DeleteAllLinks();
            if (sn.isEmpty()) {
                sn.addInitialLinks();
            }

            model.put("sn", sn);
            model.put("categoryOptions", sn.getcategory());
            model.put("locationOptions", sn.getlocation());
            model.put("salaryOptions", sn.getAverageSalary());
            model.put("employeeOptions", sn.getEmployeeCount());


            if (queryStr != null) {
                ArrayList<Link> query = SemNetApp.strToQuery(queryStr);
                ArrayList<String> companyList = sn.query(query);

                ArrayList<Company> result = new ArrayList<>();
                for (String company : companyList) {
                    result.add(new Company(company, sn.getURL(company), sn.getSupplement(company), sn.getPicturePath(company)));
                }
                model.put("result", result);
            } else {
                queryStr = "?x category ?y\n?y donot ?z";
            }

            model.put("query", queryStr);
            ctx.render("/JavaApp.html", model);
        });

        app.post("/JavaApp", ctx -> {
            Map<String, Object> model = new HashMap<>();
            String selectedOption = ctx.formParam("categoryOption");
            String locationOption = ctx.formParam("locationOption");
            String salaryOption = ctx.formParam("salaryOption");
            String employeeOption = ctx.formParam("employeeOption");
            //取得した選択肢をウェブに送り返す．
            model.put("categoryOption", selectedOption);
            model.put("locationOption", locationOption);
            model.put("salaryOption", salaryOption);
            model.put("employeeOption", employeeOption);
            String queryStr = "";

            if (selectedOption != null && !selectedOption.isEmpty()) {
                queryStr = "?x category " + selectedOption;
            }
            if (locationOption != null && !locationOption.isEmpty()) {
                queryStr += "\n?x locate " + locationOption;
            }
            if (salaryOption != null && !salaryOption.isEmpty()) {
                queryStr += "\n?x averageSalary " + salaryOption;
            }
            if (employeeOption != null && !employeeOption.isEmpty()) {
                queryStr += "\n?x employeeCount " + employeeOption;
            }

            SemanticNet sn = new SemanticNet();
            sn.DeleteAllLinks();
            if (sn.isEmpty()) {
                sn.addInitialLinks();
            }

            model.put("sn", sn);
            model.put("categoryOptions", sn.getcategory());
            model.put("locationOptions", sn.getlocation());
            model.put("salaryOptions", sn.getAverageSalary());
            model.put("employeeOptions", sn.getEmployeeCount());

            ArrayList<Link> query = SemNetApp.strToQuery(queryStr);
            ArrayList<String> companyList = sn.query(query);

            ArrayList<Company> result = new ArrayList<>();
            if (companyList != null) {
                for (String company : companyList) {
                    result.add(new Company(company, sn.getURL(company), sn.getSupplement(company), sn.getPicturePath(company)));
                }
            } else {
                result.add(new Company("結果なし", "http:/localhost:7000/JavaApp", "結果なし", ""));
            }

            model.put("result", result);
            model.put("query", queryStr);

            ctx.render("/JavaApp.html", model);
        });

        app.get("/JavaApp/Ikkyu", ctx -> ctx.render("/hyperlink.html"));
        app.post("/JavaApp/Ikkyu", ctx -> ctx.render("/hyperlink.html"));
    }
}

=== ./Company.java ===
package JavaApp;

public class Company {
    private String name;
    private String url;
    private String supplement;
    private String picturePath;

    // Constructor
    public Company(String name, String url, String supplement, String picturePath) {
        this.name = name;
        this.url = url;
        this.supplement = supplement;
        this.picturePath = picturePath;
    }

    // Getters
    public String getName() {
        return name;
    }

    public String getSupplement() {
        return supplement;
    }

    public String getUrl() {
        return url;
    }

    public String getPicturePath() {
        return picturePath;
    }

    // Setters
    public void setName(String name) {
        this.name = name;
    }

    public void setSupplement(String supplement) {
        this.supplement = supplement;
    }

    public void setUrl(String url) {
        this.url = url;
    }

    public void setPicturePath(String picturePath) {
        this.picturePath = picturePath;
    }
}

=== ./Database.java ===
package JavaApp;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;

/**
 * Databaseクラス
 */
public class Database {
    private static Connection connection;

    public static void initializeDatabase() {
		try {
		    // データベースへの接続を作成
		    connection = DriverManager.getConnection("jdbc:h2:./data/semnetdb");
	
	
		    // linksテーブルの作成
		    Statement stmt = connection.createStatement();
		    stmt.execute("CREATE TABLE IF NOT EXISTS links (" +
				           "id INT AUTO_INCREMENT PRIMARY KEY, " +
				           "label VARCHAR(255), " +
				           "tail VARCHAR(255), " +
				           "head VARCHAR(255))");
		} catch (SQLException e) {
		    e.printStackTrace();
		}
    }

    public static Connection getConnection() {
		return connection;
    }
}

=== ./InitialLinkAdder.java ===
package JavaApp;

import java.util.ArrayList;


/**
 * 初期リンクを追加するための専用クラス
 */
public class InitialLinkAdder {

    public static void addInitialLinks(SemanticNet semanticNet) {
        ArrayList<Link> initialLinks = new ArrayList<>();
        initialLinks.add(new Link("is-a", "旅行・ホテル", "通信", semanticNet));
        initialLinks.add(new Link("supplement", "一休", "【東証一部上場】～日本最大級のレストラン予約サイト～", semanticNet));
        initialLinks.add(new Link("URL", "一休", "http://localhost:7000/JavaApp/Ikkyu", semanticNet));
        initialLinks.add(new Link("employeeCount", "一休", "100～300人未満", semanticNet));
        initialLinks.add(new Link("averageSalary", "一休", "1000万円～1200万円", semanticNet));
        initialLinks.add(new Link("category", "一休", "旅行・ホテル", semanticNet));
        initialLinks.add(new Link("locate", "一休", "東京", semanticNet));
        initialLinks.add(new Link("picturePath", "一休", "/ikkyu.png", semanticNet));

        for (Link link : initialLinks) {
            semanticNet.addLink(link);
        }
    }
}

=== ./Link.java ===
package JavaApp;

import java.util.ArrayList;
import java.util.HashMap;

public class Link {
	String label;
	Node tail;
	Node head;
	boolean inheritance;

	// コンストラクタ．引数のラベル，テールノード，ヘッドノードを使ってLinkオブジェクトを作成する．
	// また，引数のSementicNetオブジェクトを使ってノードの管理も行う．
	public Link(String theLabel, String theTail, String theHead, SemanticNet sn) {
		label = theLabel;
		HashMap<String, Node> nodesNameTable = sn.getNodesNameTable();
		ArrayList<Node> nodes = sn.getNodes();

		tail = nodesNameTable.get(theTail);
		if (tail == null) {
			tail = new Node(theTail);
			nodes.add(tail);
			nodesNameTable.put(theTail, tail);
		}

		head = nodesNameTable.get(theHead);
		if (head == null) {
			head = new Node(theHead);
			nodes.add(head);
			nodesNameTable.put(theHead, head);
		}

		// is-aリンクであればinheritanceをtrueにする
		inheritance = "is-a".equals(theLabel);
	}

	// クエリ生成用のコンストラクタ．ラベル，テールノード，ヘッドノードを使ってLinkオブジェクトを作成する．
	public Link(String theLabel, String theTail, String theHead) {
		label = theLabel;
		tail = new Node(theTail);
		head = new Node(theHead);
		inheritance = false;
	}

	// Linkのinheritance属性をセットする
	public void setInheritance(boolean value) {
		inheritance = value;
	}

	// Linkのテールノードを返す
	public Node getTail() {
		return tail;
	}

	// Linkのヘッドノードを返す
	public Node getHead() {
		return head;
	}

	// Linkのラベルを返す
	public String getLabel() {
		return label;
	}

	// Linkの完全な名称を返す
	public String getFullName() {
		return tail.getName() + " " + label + " " + head.getName();
	}

	// Linkの文字列表現を返す
	public String toString() {
		String result = tail.getName() + "  =" + label + "=>  " + head.getName();
		if (!inheritance) {
			return result;
		} else {
			return "( " + result + " )";
		}
	}
}
=== ./Matcher.java ===
package JavaApp;

import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;

/**
 * Matcherクラス
 * 2つの文字列が一致するかどうかを判定する
 */
class Matcher {
    StringTokenizer st1;
    StringTokenizer st2;
    Map<String, String> vars;

    Matcher() {
        vars = new HashMap<String, String>();
    }

    // 2つの文字列が一致するかどうかを判定し、bindings map に変数と値の対応を記録する
    public boolean matching(String string1, String string2, Map<String, String> bindings) {
        this.vars = bindings;
        if (matching(string1, string2)) {
            return true;
        } else {
            return false;
        }
    }

    // 2つの文字列が一致するかどうかを再帰的に判定する
    public boolean matching(String string1, String string2) {
        // 同じなら成功
        if (string1.equals(string2))
            return true;

        // 各々トークンに分ける
        st1 = new StringTokenizer(string1);
        st2 = new StringTokenizer(string2);

        // 数が異なったら失敗
        if (st1.countTokens() != st2.countTokens())
            return false;

        // 定数同士
        for (int i = 0; i < st1.countTokens();) {
            if (!tokenMatching(st1.nextToken(), st2.nextToken())) {
                // トークンが一つでもマッチングに失敗したら失敗
                return false;
            }
        }

        // 最後まで O.K. なら成功
        return true;
    }

    // 2つのトークンが一致するかどうかを判定する
    boolean tokenMatching(String token1, String token2) {
        if (token1.equals(token2))
            return true;
        if (var(token1) && !var(token2))
            return varMatching(token1, token2);
        if (!var(token1) && var(token2))
            return varMatching(token2, token1);
        return false;
    }

    // 変数と値の対応を記録する
    boolean varMatching(String vartoken, String token) {
        if (vars.containsKey(vartoken)) {
            if (token.equals(vars.get(vartoken))) {
                return true;
            } else {
                return false;
            }
        } else {
            vars.put(vartoken, token);
        }
        return true;
    }

    // トークンが変数かどうかを判定する
    boolean var(String str1) {
        // 先頭が ? なら変数
        return str1.startsWith("?");
    }
}
=== ./Node.java ===
package JavaApp;

import java.util.ArrayList;

class Node {
	String name;

	// 自分から出ていくリンク
	ArrayList<Link> departFromMeLinks;
	// 自分に入ってくるリンク
	ArrayList<Link> arriveAtMeLinks;

	// コンストラクタ。引数の名前でNodeオブジェクトを作成する。
	// また、自分から出ていくリンクと自分に入ってくるリンクの管理用のリストを初期化する。
	public Node(String theName) {
		name = theName;
		departFromMeLinks = new ArrayList<Link>();
		arriveAtMeLinks = new ArrayList<Link>();
	}

	// ノードに到達するis-aリンクのテールノードを返す
	public ArrayList<Node> getISATails() {
		ArrayList<Node> isaParents = new ArrayList<Node>();
		for (Link theLink : departFromMeLinks) {
			if ("is-a".equals(theLink.getLabel())) {
				// theLink: thisNode(is child) =is-a=> parentNode
				isaParents.add(theLink.getHead());
			}
		}
		return isaParents;
	}


	// ノードから出ていくリンクをリストに追加する
	public void addDepartFromMeLinks(Link theLink) {
		departFromMeLinks.add(theLink);
	}

	// ノードから出ていくリンクのリストを返す
	public ArrayList<Link> getDepartFromMeLinks() {
		return departFromMeLinks;
	}

	// ノードに到達するリンクをリストに追加する
	public void addArriveAtMeLinks(Link theLink) {
		arriveAtMeLinks.add(theLink);
	}

	// ノードに到達するリンクのリストを返す
	public ArrayList<Link> getArriveAtMeLinks() {
		return arriveAtMeLinks;
	}

	// ノードの名前を返す
	public String getName() {
		return name;
	}

	// ノードの文字列表現を返す
	public String toString() {
		return name;
	}
}
=== ./SemanticNet.java ===
package JavaApp;

import java.sql.*;
import java.util.*;
import java.util.regex.Pattern;

/**
 * SemanticNetクラス
 * セマンティックネットワークを管理するクラス。ノードやリンクの追加、クエリ処理を行う。
 */
public class SemanticNet {

    private ArrayList<Node> nodes;  // Nodeのリスト
    private HashMap<String, Node> nodesNameTable;  // Node名で検索できるテーブル

    // コンストラクタ。ノードリストとノード名テーブルを初期化する。
    public SemanticNet() {
        nodes = new ArrayList<>();
        nodesNameTable = new HashMap<>();
    }

    public ArrayList<Node> getNodes() {
        return nodes;
    }

    public HashMap<String, Node> getNodesNameTable() {
        return nodesNameTable;
    }

    // 初期リンクを追加する（処理を委譲）
    public void addInitialLinks() {
        InitialLinkAdder.addInitialLinks(this);
    }

    public String getPicturePath(String company) {
        return getAttribute(company, "picturePath");
    }

    public String getURL(String company) {
        return getAttribute(company, "URL");
    }

    public String getSupplement(String company) {
        return getAttribute(company, "supplement");
    }

    private String getAttribute(String company, String label) {
        for (Node node : nodes) {
            ArrayList<Link> arriveAtMeLinks = node.getArriveAtMeLinks();
            for (Link link : arriveAtMeLinks) {
                if (label.equals(link.getLabel()) && company.equals(link.getTail().getName())) {
                    return link.getHead().getName();
                }
            }
        }
        return null;
    }

    public ArrayList<String> getcategory() {
        return getAttributeList("category");
    }

    public ArrayList<String> getAverageSalary() {
        ArrayList<String> averageSalaries = getAttributeList("averageSalary");
        return sortAverageSalaries(averageSalaries);
    }

    private ArrayList<String> sortAverageSalaries(ArrayList<String> salaries) {
        // ソート用のリストを作成
        List<SalaryRange> ranges = new ArrayList<>();
        for (String salary : salaries) {
            if (!salary.equals("N/A")) { // "N/A" を削除
                ranges.add(new SalaryRange(salary));
            }
        }

        // 最小値を基準にソート
        ranges.sort(Comparator.comparingInt(SalaryRange::getMin));

        // 元の形式に戻す
        ArrayList<String> sortedSalaries = new ArrayList<>();
        for (SalaryRange range : ranges) {
            sortedSalaries.add(range.getOriginalText());
        }

        return sortedSalaries;
    }

    // 範囲を解析するクラス
    private class SalaryRange {
        private String originalText;
        private int min;

        public SalaryRange(String text) {
            this.originalText = text;
            this.min = parseMinValue(text);
        }

        public String getOriginalText() {
            return originalText;
        }

        public int getMin() {
            return min;
        }

        private int parseMinValue(String text) {
            Pattern pattern = Pattern.compile("(\\d+)");
            java.util.regex.Matcher matcher = pattern.matcher(text);

            if (matcher.find()) {
                return Integer.parseInt(matcher.group(1)) * 10000; // 万円単位を考慮
            }
            return Integer.MAX_VALUE; // エラー時の保険
        }
    }


    public ArrayList<String> getEmployeeCount() {
        ArrayList<String> employeeCounts = getAttributeList("employeeCount");
        return sortEmployeeCounts(employeeCounts);
    }

    private ArrayList<String> sortEmployeeCounts(ArrayList<String> counts) {
        // ソート用のリストを作成
        List<EmployeeRange> ranges = new ArrayList<>();
        for (String count : counts) {
            ranges.add(new EmployeeRange(count));
        }

        // 最小値を基準にソート
        ranges.sort(Comparator.comparingInt(EmployeeRange::getMin));

        // 元の形式に戻す
        ArrayList<String> sortedCounts = new ArrayList<>();
        for (EmployeeRange range : ranges) {
            sortedCounts.add(range.getOriginalText());
        }

        return sortedCounts;
    }

    // 範囲を解析するクラス
    private class EmployeeRange {
        private String originalText;
        private int min;

        public EmployeeRange(String text) {
            this.originalText = text;
            this.min = parseMinValue(text);
        }

        public String getOriginalText() {
            return originalText;
        }

        public int getMin() {
            return min;
        }

        private int parseMinValue(String text) {
            Pattern pattern = Pattern.compile("(\\d+|～)"); // 数字または "～" を取得
            java.util.regex.Matcher matcher = pattern.matcher(text);

            if (matcher.find()) {
                String minStr = matcher.group(1);
                if (minStr.equals("～")) {
                    return 0; // "～" の場合は最小値を0に設定
                }
                // "万人" を考慮
                if (text.contains("万人")) {
                    return Integer.parseInt(minStr) * 10000;
                }
                return Integer.parseInt(minStr);
            }
            return Integer.MAX_VALUE; // エラー時の保険
        }
    }

    public ArrayList<String> getlocation() {
        return getAttributeList("locate");
    }

    private ArrayList<String> getAttributeList(String label) {
        HashSet<String> attributeSet = new HashSet<>();
        for (Node node : nodes) {
            ArrayList<Link> arriveAtMeLinks = node.getArriveAtMeLinks();
            for (Link link : arriveAtMeLinks) {
                if (label.equals(link.getLabel())) {
                    attributeSet.add(link.getHead().getName());
                }
            }
        }
        return new ArrayList<>(attributeSet);
    }

    // リンクをデータベースに追加し、ノードのリンク情報も更新する
    public void addLink(Link link) {
        try {
            Connection conn = Database.getConnection();
            PreparedStatement ps = conn.prepareStatement("INSERT INTO links (label, tail, head) VALUES (?, ?, ?)");
            ps.setString(1, link.getLabel());
            ps.setString(2, link.getTail().getName());
            ps.setString(3, link.getHead().getName());
            ps.executeUpdate();

            // Nodeに出発・到着リンクを追加
            link.getTail().addDepartFromMeLinks(link);
            link.getHead().addArriveAtMeLinks(link);

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    // データベースからリンク情報を取得する
    public List<Link> getLinks() {
        List<Link> links = new ArrayList<>();
        try {
            Connection conn = Database.getConnection();
            PreparedStatement ps = conn.prepareStatement("SELECT label, tail, head FROM links");
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String label = rs.getString("label");
                String tail = rs.getString("tail");
                String head = rs.getString("head");
                links.add(new Link(label, tail, head, this));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return links;
    }

    // データベースのリンクが空かどうかを確認する
    public boolean isEmpty() {
        try {
            Connection conn = Database.getConnection();
            PreparedStatement ps = conn.prepareStatement("SELECT COUNT(*) FROM links");
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                int count = rs.getInt(1);
                return count == 0;
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return true;
    }

    // データベースのリンクを全て削除する
    public void DeleteAllLinks() {
        try {
            Connection conn = Database.getConnection();
            PreparedStatement ps = conn.prepareStatement("DELETE FROM links");
            ps.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    // クエリを実行し、結果を文字列で返す
    public ArrayList<String> query(ArrayList<Link> queries) {
        List<List<Map<String, String>>> bindingsList = new ArrayList<>();
        for (Link query : queries) {
            List<Map<String, String>> bindings = queryLink(query);
            if (bindings.isEmpty()) {
                // クエリが失敗した場合
                return null;
            } else {
                bindingsList.add(bindings);
            }
        }

        List<Map<String, String>> results = join(bindingsList);

        if (results.isEmpty()) {
            return null;
        }
        //クエリの検索結果を基に？xに当てはまる企業名のリストを作成する
        ArrayList<String> companyList = new ArrayList<>();
        for (Map<String, String> result : results) {
            companyList.add(result.get("?x"));
        }
        return companyList;
    }

    // 単一のクエリを実行する
    public List<Map<String, String>> queryLink(Link theQuery) {
        List<Map<String, String>> bindingsList = new ArrayList<>();
        List<Link> links = getLinks();
        Matcher matcher = new Matcher();

        // まずは直接マッチするリンクを探す
        for (Link link : links) {
            Map<String, String> bindings = new HashMap<>();
            if (matcher.matching(theQuery.getFullName(), link.getFullName(), bindings)) {
                bindingsList.add(bindings);
            }
        }

        // 直接マッチがない場合はis-a継承を試す
        if (bindingsList.isEmpty()) {
            bindingsList = queryWithInheritance(theQuery);
        }

        return bindingsList;
    }

    // is-aリンクによる継承を利用して再クエリする
    private List<Map<String, String>> queryWithInheritance(Link theQuery) {
        List<Map<String, String>> bindingsList = new ArrayList<>();
        Matcher m = new Matcher();

        String queryTail = theQuery.getTail().getName();

        // テールが変数なら全ノードを対象に、定数ならそのノードのみ対象にする
        for (Node node : nodes) {
            if (queryTail.startsWith("?") || node.getName().equals(queryTail)) {
                // node から is-a を辿って継承されるリンクを取得
                List<Link> inheritedLinks = getInheritedLinks(node);
                for (Link inheritedLink : inheritedLinks) {
                    Map<String, String> bindings = new HashMap<>();
                    if (m.matching(theQuery.getFullName(), inheritedLink.getFullName(), bindings)) {
                        bindingsList.add(bindings);
                    }
                }
            }
        }

        return bindingsList;
    }

    // ノードからis-aを辿り、上位ノードのリンクを継承する
    private List<Link> getInheritedLinks(Node node) {
        List<Link> inheritedLinks = new ArrayList<>();
        Set<Node> visited = new HashSet<>();
        gatherInheritedLinks(node, inheritedLinks, visited);
        return inheritedLinks;
    }

    private void gatherInheritedLinks(Node node, List<Link> result, Set<Node> visited) {
        if (visited.contains(node)) {
            return;
        }
        visited.add(node);

        // 自ノードの出発リンクのうち、is-a以外の属性リンクを追加
        for (Link l : node.getDepartFromMeLinks()) {
            if (!"is-a".equals(l.getLabel())) {
                result.add(l);
            }
        }

        // 親ノード(is-aで指し示される上位概念)にも同様の処理を再帰的に適用
        ArrayList<Node> parents = node.getISATails();
        for (Node parent : parents) {
            gatherInheritedLinks(parent, result, visited);
        }
    }

    // 複数のクエリ結果を結合する
    public List<Map<String, String>> join(List<List<Map<String, String>>> bindingsList) {
        int size = bindingsList.size();
        switch (size) {
            case 0:
                // バインディングがない場合
                return new ArrayList<>();
            case 1:
                return bindingsList.get(0);
            case 2:
                return joinBindings(bindingsList.get(0), bindingsList.get(1));
            default:
                List<Map<String, String>> first = bindingsList.get(0);
                bindingsList.remove(0);
                List<Map<String, String>> rest = join(bindingsList);
                return joinBindings(first, rest);
        }
    }

    // 2つのバインディングリストを結合する
    public List<Map<String, String>> joinBindings(List<Map<String, String>> bindings1, List<Map<String, String>> bindings2) {
        List<Map<String, String>> resultBindings = new ArrayList<>();
        for (Map<String, String> b1 : bindings1) {
            for (Map<String, String> b2 : bindings2) {
                Map<String, String> merged = joinBinding(b1, b2);
                if (merged != null) {
                    resultBindings.add(merged);
                }
            }
        }
        return resultBindings;
    }

    // 2つのバインディングを結合する
    public Map<String, String> joinBinding(Map<String, String> b1, Map<String, String> b2) {
        Map<String, String> result = new HashMap<>(b1);
        for (String key : b2.keySet()) {
            String value1 = result.get(key);
            String value2 = b2.get(key);
            if (value1 != null && !value1.equals(value2)) {
                // 競合がある場合、失敗
                return null;
            } else {
                result.put(key, value2);
            }
        }
        return result;
    }


}
=== ./SemNetApp.java ===
package JavaApp;

import io.javalin.http.staticfiles.Location;
import org.thymeleaf.TemplateEngine;
import org.thymeleaf.templateresolver.ClassLoaderTemplateResolver;

import io.javalin.Javalin;
import io.javalin.rendering.JavalinRenderer;
import io.javalin.rendering.template.JavalinThymeleaf;

import java.util.ArrayList;

/**
 * SemNetAppクラス
 */
public class SemNetApp {
    public static void main(String[] args) {
        // H2データベースの初期化
        Database.initializeDatabase();

        // Thymeleafのテンプレート設定
        ClassLoaderTemplateResolver templateResolver = new ClassLoaderTemplateResolver();
        templateResolver.setTemplateMode("HTML");
        templateResolver.setPrefix("/templates/");
        templateResolver.setSuffix(".html");

        // TemplateEngineの設定
        TemplateEngine templateEngine = new TemplateEngine();
        templateEngine.setTemplateResolver(templateResolver);

        // JavalinにThymeleafを登録
        JavalinRenderer.register(new JavalinThymeleaf(templateEngine), ".html");

        // Javalinアプリケーションを作成
        Javalin app = Javalin.create(config -> {
            config.staticFiles.add("/templates/Album", Location.CLASSPATH); // 静的ファイルの設定
        }).start(7000);

        // ルーティングを設定
        AppRouter.setupRoutes(app);
    }

    /**
     * クエリ文字列をLinkオブジェクトのリストに変換
     */
    public static ArrayList<Link> strToQuery(String queryStr) {
        ArrayList<Link> query = new ArrayList<>();
        if (queryStr != null) {
            String[] lines = queryStr.split("\n");
            for (String line : lines) {
                line = line.trim();
                String[] tokens = line.split("\\s+");
                if (tokens.length == 3) {
                    query.add(new Link(tokens[1], tokens[0], tokens[2], new SemanticNet()));
                }
            }
        }
        return query;
    }
}

